st_transform(st_crs(Mecklenberg))
ggplot() + geom_sf(data=Mecklenberg,fill = "white", color = "grey60",size= 0.5)+
stat_density2d(data = data.frame(st_coordinates(park)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_gradient(low = "#25CB10", high = "#FA7800",
breaks=c(0.000000003,0.00000003),
labels=c("Minimum","Maximum"), name = "Density") +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Parks, Mecklenberg")
sale <-
sale %>%
mutate(park_nn1 = nn_function(st_coordinates(sale), st_coordinates(park), 1),
park_nn3 = nn_function(st_coordinates(sale), st_coordinates(park), 3))
school_public <- st_read("data/cms_schools/CMS_Schools.shp") %>%
st_transform(st_crs(Mecklenberg)) %>%
dplyr::select(city, address)
school_charter <- st_read("data/schools_charter/Schools_Charter.shp") %>%
st_transform(st_crs(Mecklenberg)) %>%
dplyr::select(city, address)
school<-rbind(school_public,school_charter)
ggplot()+
geom_sf(data=Mecklenberg,fill = "white", color = "grey60",size= 0.5)+
geom_sf(data=school)+
labs(title = "Public Schools in Mecklenberg")
sale <-
sale %>%
mutate(school_nn1 = nn_function(st_coordinates(sale), st_coordinates(school), 1),
school_nn2 = nn_function(st_coordinates(sale), st_coordinates(school), 2),
school_nn3 = nn_function(st_coordinates(sale), st_coordinates(school), 3))
homelessshelter <- st_read("data/homeless_shelters/Homeless_Shelters.shp") %>%
st_transform(st_crs(Mecklenberg))
ggplot() +
geom_sf(data = homelessshelter, fill = "red") +
geom_sf(data=st_union(Mecklenberg),fill = "transparent", color = "grey10",size= 0.7)
ggplot() + geom_sf(data=st_union(Mecklenberg), color = "grey10",size= 0.7) +
stat_density2d(data = data.frame(st_coordinates(homelessshelter)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_gradient(low = "#25CB10", high = "#FA7800",
breaks=c(0.000000003,0.00000003),
labels=c("Minimum","Maximum"), name = "Density") +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Aggravated Assaults, Boston") +
mapTheme()
sale <-
sale %>%
mutate(homelessshelter_nn1 = nn_function(st_coordinates(sale), st_coordinates(homelessshelter), 1))
landfill <- st_read("data/landfills/Landfills.shp") %>%
st_transform(st_crs(Mecklenberg))
ggplot() +
geom_sf(data=Mecklenberg,fill = "white", color = "grey60",size= 0.5)+
geom_sf(data = landfill, fill = "red") +
labs(title = "Landfill in Mecklenberg")
sale <-
sale %>%
mutate(landfill = nn_function(st_coordinates(sale), st_coordinates(st_centroid(landfill)), 1))
flood100y <- st_read("data/femaexisting_100yr_floodplain/FEMAExisting_100yr_Floodplain.shp") %>%
st_transform(st_crs(Mecklenberg))
ggplot() +
geom_sf(data=Mecklenberg,fill = "white", color = "grey60",size= 0.5)+
geom_sf(data = flood100y, fill = "dark blue",color="transparent") +
labs(title = "100 year Floodplain in Mecklenberg")
salegroup <-
rbind(
sale[flood100y,] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <- salegroup[!duplicated(salegroup$musaID), ]
floodpt<-
salegroup %>%
filter(flood100y == 1)
ggplot() +
geom_sf(data=Mecklenberg,fill = "white", color = "grey60",size= 0.5)+
geom_sf(data = flood100y, fill = "dark blue",color="transparent") +
geom_sf(data = salegroup,  col = "grey80",
show.legend = "point", size = .2) +
geom_sf(data = floodpt, col = "red",
show.legend = "point", size = .7) +
labs(title = "Houses within 100 year Floodplain in Mecklenberg")
salegroup <-
salegroup %>%
mutate(age = 2022 - yearbuilt)
st_drop_geometry(salegroup) %>%
dplyr::select(price, age, heatedarea, fullbaths, bedrooms,homelessshelter_nn1,park_nn1,park_nn3,landfill,flood100y,school_nn1,school_nn2,school_nn3,bus_nn1,station_nn1) %>%
filter(price <= 1000000, age<500, bedrooms<20) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "#FA7800") +
facet_wrap(~Variable, ncol = 4, scales = "free") +
labs(title = "Price as a function of continuous variables") +
plotTheme()
st_drop_geometry(salegroup) %>%
dplyr::select(price, descbuildi, storyheigh, aheatingty, heatedfuel,actype,extwall,foundation, bldggrade,
sale_year) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_bar(position = "dodge", stat = "summary", fun.y = "mean") +
facet_wrap(~Variable, ncol = 4, scales = "free") +
labs(title = "Price as a function of\ncategorical variables", y = "Mean_Price") +
plotTheme() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
numericVars <-
select_if(st_drop_geometry(salegroup), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
s <-salegroup %>%
filter(age <= 200)
histogram(s$age,breaks=40)
salegroup <-
salegroup %>%
mutate(age.cat = case_when(
age >= 0 & age <15  ~ "Up to 15yrs",
age >= 15 & age < 50  ~ "15-50yrs",
age >= 50 & age < 75  ~ "50-75yrs",
age >= 75  ~ "75+yrs"),)
glimpse(s$storyheigh)
salegroup$story.cat <- recode(salegroup$storyheigh,"1.0 STORY"= "1story","1 STORY"= "1story", "1.5 STORY" = "2story", "2.0 STORY" = "2story","BI-LEVEL"="2story","SPLIT LEVEL"="2story","2.5 STORY"="3story","3.0 STORY"="3story","CAPE COD"="other","RANCH W/BSMT"="other")
census_api_key("a78f5d0c0fd577cd3f16136b5a87d6ecdb62ffba", overwrite = TRUE)
tracts <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2020, state="NC",
county="Mecklenburg County", geometry=TRUE) %>%
st_transform('ESRI:102286')
tracts <-
tracts %>%
dplyr::select( -NAME, -moe) %>%
spread(variable, estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts <-
tracts %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0)) %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
ggplot()+
geom_sf(data = tracts, fill = "transparent", color = "black")+
geom_sf(data=salegroup,
show.legend = "point", size= 0.1) +
labs(title = "Mecklenburg Census Tracts") +
theme(plot.title = element_text(size=22))
salegroup<-st_intersection(salegroup,tracts)
salegroup<-st_intersection(salegroup,Mecklenberg)
reg1 <- lm(price ~ ., data = st_drop_geometry(salegroup) %>%
dplyr::select(price, zip,heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
summary(reg1)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh.cat, salegroup$heatedfuel, salegroup$actype),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
summary(reg.training)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = Mecklenberg.test, aes(colour = q5(as.numeric(SalePrice.AbsError))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(sale,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price Absolute Error, Mecklenberg") +
mapTheme()
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(price ~ ., data = st_drop_geometry(salegroup) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc),
method = "lm", trControl = fitControl, na.action = na.pass)
reg.cv
reg.cv$resample[1:5,]
dplyr::select(reg.cv$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(reg.cv$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric,scales = "free_x") +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
labs(x="Goodness of Fit", y="Count", title="CV Goodness of Fit Metrics",
subtitle = "Across-fold mean reprented as dotted lines")
coords.test <- st_coordinates(Mecklenberg.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
Mecklenberg.test$lagPrice <- lag.listw(spatialWeights.test, Mecklenberg.test$price)
Mecklenberg.test$lagPriceError<-lag.listw(spatialWeights.test, Mecklenberg.test$SalePrice.Error, NAOK = TRUE)
#Mecklenberg.test %>%
#mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error, NAOK = TRUE)) %>%
#ggplot(aes(lagPriceError, SalePrice.Error))
ggplot(Mecklenberg.test, aes(x=lagPrice, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Price as a function of the spatial lag of price",
caption = "Figure 4.2",
x = "Spatial lag of price (Mean price of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
ggplot(Mecklenberg.test, aes(x=lagPriceError, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Error as a function of the spatial lag of price",
caption="Figure 4.3",
x = "Spatial lag of errors (Mean error of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
moranTest <- moran.mc(Mecklenberg.test$SalePrice.Error,
spatialWeights.test, nsim = 999, na.action=na.omit)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
# Errors by neighborhood
left_join(
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(meanPrice = mean(price, na.rm = T)),
mutate(Mecklenberg.test, predict.fe =
predict(lm(price ~ zip, data = Mecklenberg.test),
Mecklenberg.test)) %>%
st_drop_geometry %>%
group_by(zip) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
reg.nhood <- lm(price ~ ., data = as.data.frame(Mecklenberg.training) %>%
dplyr::select(zip, price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
Mecklenberg.test.nhood <-
Mecklenberg.test %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict- price,
SalePrice.AbsError = abs(SalePrice.Predict- price),
SalePrice.APE = (abs(SalePrice.Predict- price)) / price)%>%
filter(price < 5000000)
summary(reg.nhood)
bothRegressions <-
rbind(
dplyr::select(Mecklenberg.test, starts_with("price"), Regression, zip, SalePrice.Predict,SalePrice.Error,SalePrice.AbsError,SalePrice.APE) ,
dplyr::select(Mecklenberg.test.nhood, starts_with("price"), Regression, zip, SalePrice.Predict, SalePrice.Error,SalePrice.AbsError,SalePrice.APE))
st_drop_geometry(bothRegressions) %>%
mutate_if(is.numeric, ~ifelse(abs(.) == Inf,NA,.))%>%
gather(Variable, Value, -Regression, -zip) %>%
filter(Variable == "SalePrice.AbsError" | Variable == "SalePrice.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
bothRegressions %>%
dplyr::select(SalePrice.Predict, price, Regression) %>%
ggplot(aes(price, SalePrice.Predict)) +
geom_point() +
stat_smooth(aes(price, price),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(SalePrice.Predict, price),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
facet_wrap(~Regression) +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip) %>%
summarize(mean.MAPE = mean(SalePrice.APE, na.rm = T)) %>%
ungroup() %>%
left_join(Mecklenberg) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
Mecklenberg.training2 <-
Mecklenberg.training %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, Mecklenberg.training),
)
CHALLENGE<-
<<<<<<< Updated upstream
rbind(Mecklenberg.test.nhood[Mecklenberg.test.nhood$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")],Mecklenberg.training2[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")])%>%
st_drop_geometry
View(Mecklenberg.test.nhood)
View(salegroup)
View(CHALLENGE)
View(Mecklenberg.training)
Mecklenberg.final <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, salegroup),
)
CHALLENGE<- Mecklenberg.final[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")]
Mecklenberg.training2 <-
Mecklenberg.training %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, Mecklenberg.training),
)
CHALLENGE<-
rbind(Mecklenberg.test.nhood[Mecklenberg.test.nhood$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")],Mecklenberg.training2[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")])%>%
st_drop_geometry
Mecklenberg.final <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, salegroup),
)
CHALLENGE<- Mecklenberg.final[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")]
View(salegroup)
=======
rbind(Mecklenberg.test.nhood[Mecklenberg.test.nhood$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")],Mecklenberg.training2[Mecklenberg.training2$toPredict=="CHALLENGE",c("musaID","SalePrice.Predict")])%>%
st_drop_geometry%>%
rename(prediction = SalePrice.Predict)%>%
subset(select=c(2,1))
write.csv(CHALLENGE,"SY_group_prediction2.csv", row.names = FALSE)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh.cat, salegroup$story.cat,salegroup$heatedfuel, salegroup$actype),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
View(salegroup)
inTrain <- createDataPartition(
y = paste(salegroup$age.cat, salegroup$story.cat,salegroup$heatedfuel, salegroup$actype),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
summary(reg.training)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
inTrain <- createDataPartition(
y = paste(salegroup$age.cat, salegroup$story.cat,salegroup$heatedfuel, salegroup$actype),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
summary(reg.training)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = Mecklenberg.test, aes(colour = q5(as.numeric(SalePrice.AbsError))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(sale,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price Absolute Error, Mecklenberg") +
mapTheme()
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(price ~ ., data = st_drop_geometry(salegroup) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc),
method = "lm", trControl = fitControl, na.action = na.pass)
reg.cv
reg.cv$resample[1:5,]
dplyr::select(reg.cv$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(reg.cv$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric,scales = "free_x") +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
labs(x="Goodness of Fit", y="Count", title="CV Goodness of Fit Metrics",
subtitle = "Across-fold mean reprented as dotted lines")
coords.test <- st_coordinates(Mecklenberg.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
Mecklenberg.test$lagPrice <- lag.listw(spatialWeights.test, Mecklenberg.test$price)
Mecklenberg.test$lagPriceError<-lag.listw(spatialWeights.test, Mecklenberg.test$SalePrice.Error, NAOK = TRUE)
#Mecklenberg.test %>%
#mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error, NAOK = TRUE)) %>%
#ggplot(aes(lagPriceError, SalePrice.Error))
ggplot(Mecklenberg.test, aes(x=lagPrice, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Price as a function of the spatial lag of price",
caption = "Figure 4.2",
x = "Spatial lag of price (Mean price of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
ggplot(Mecklenberg.test, aes(x=lagPriceError, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Error as a function of the spatial lag of price",
caption="Figure 4.3",
x = "Spatial lag of errors (Mean error of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
moranTest <- moran.mc(Mecklenberg.test$SalePrice.Error,
spatialWeights.test, nsim = 999, na.action=na.omit)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
# Errors by neighborhood
left_join(
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(meanPrice = mean(price, na.rm = T)),
mutate(Mecklenberg.test, predict.fe =
predict(lm(price ~ zip, data = Mecklenberg.test),
Mecklenberg.test)) %>%
st_drop_geometry %>%
group_by(zip) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
reg.nhood <- lm(price ~ ., data = as.data.frame(Mecklenberg.training) %>%
dplyr::select(zip, price, heatedarea, bedrooms,
age.cat,story.cat,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,actype,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc))
Mecklenberg.test.nhood <-
Mecklenberg.test %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict- price,
SalePrice.AbsError = abs(SalePrice.Predict- price),
SalePrice.APE = (abs(SalePrice.Predict- price)) / price)%>%
filter(price < 5000000)
summary(reg.nhood)
bothRegressions <-
rbind(
dplyr::select(Mecklenberg.test, starts_with("price"), Regression, zip, SalePrice.Predict,SalePrice.Error,SalePrice.AbsError,SalePrice.APE) ,
dplyr::select(Mecklenberg.test.nhood, starts_with("price"), Regression, zip, SalePrice.Predict, SalePrice.Error,SalePrice.AbsError,SalePrice.APE))
st_drop_geometry(bothRegressions) %>%
mutate_if(is.numeric, ~ifelse(abs(.) == Inf,NA,.))%>%
gather(Variable, Value, -Regression, -zip) %>%
filter(Variable == "SalePrice.AbsError" | Variable == "SalePrice.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
bothRegressions %>%
dplyr::select(SalePrice.Predict, price, Regression) %>%
ggplot(aes(price, SalePrice.Predict)) +
geom_point() +
stat_smooth(aes(price, price),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(SalePrice.Predict, price),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
facet_wrap(~Regression) +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip) %>%
summarize(mean.MAPE = mean(SalePrice.APE, na.rm = T)) %>%
ungroup() %>%
left_join(Mecklenberg) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
>>>>>>> Stashed changes
Mecklenberg.training2 <-
Mecklenberg.training %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, Mecklenberg.training),
)
CHALLENGE<-
<<<<<<< Updated upstream
rbind(Mecklenberg.test.nhood[Mecklenberg.test.nhood$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")],Mecklenberg.training2[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")])%>%
st_drop_geometry
Mecklenberg.final <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, salegroup),
)
CHALLENGE<- Mecklenberg.final[Mecklenberg.training2$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")]
Mecklenberg.final <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.nhood, salegroup),
)
CHALLENGE<- Mecklenberg.final[Mecklenberg.final$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")]
View(salegroup)
salegroup <-
rbind(
sale[flood100y,] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <-
rbind(
sale[flood100y,] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1)%>%
mutate(flood100y = ifelse(flood100y == "1", 0, flood100y)))
#sale[flood100y, op = st_disjoint] %>%
#st_drop_geometry() %>%
#left_join(sale) %>%
#st_sf() %>%
#mutate(flood100y = 0))
View(salegroup)
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <-
rbind(
sale[flood100y,op = st_within] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
View(salegroup)
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
unique(salegroup, by = "musaID")
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup %>%
distinct(.keep_all = TRUE)
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup %>%
distinct(musaID, .keep_all = TRUE)
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <- salegroup[!duplicated(salegroup$musaID), ]
salegroup <-
rbind(
sale[flood100y,op = st_within] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
salegroup <-
rbind(
sale[flood100y,op = st_intersects] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 1),
sale[flood100y, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(sale) %>%
st_sf() %>%
mutate(flood100y = 0))
=======
rbind(Mecklenberg.test.nhood[Mecklenberg.test.nhood$toPredict=="CHALLENGE",c("SalePrice.Predict","musaID")],Mecklenberg.training2[Mecklenberg.training2$toPredict=="CHALLENGE",c("musaID","SalePrice.Predict")])%>%
st_drop_geometry%>%
rename(prediction = SalePrice.Predict)%>%
subset(select=c(2,1))
write.csv(CHALLENGE,"SY_group_prediction2.csv", row.names = FALSE)
>>>>>>> Stashed changes
