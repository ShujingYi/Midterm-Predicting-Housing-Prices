ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables: Census Tract data")
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
data.frame(Mean_Absolute_Error = mean(Mecklenberg.test$SalePrice.AbsError, na.rm = T),
Mean_Absolute_Percent_Error =mean(Mecklenberg.test$SalePrice.APE, na.rm = T))%>%
kable() %>%
kable_styling()
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = Mecklenberg.test, aes(colour = q5(as.numeric(SalePrice.AbsError))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(sale,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price Absolute Error, Mecklenberg") +
mapTheme()
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(price ~ ., data = st_drop_geometry(salegroup) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths,halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area),
method = "lm", trControl = fitControl, na.action = na.pass)
reg.cv
dplyr::select(reg.cv$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(reg.cv$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric,scales = "free_x") +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
labs(x="Goodness of Fit", y="Count", title="CV Goodness of Fit Metrics",
subtitle = "Across-fold mean reprented as dotted lines")
CHALLENGE <-
salegroup_challenge %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.training, salegroup_challenge),
)%>%
rename(prediction = SalePrice.Predict)
MODELLING <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.training, salegroup),
)%>%
rename(prediction = SalePrice.Predict)
TOTAL <- rbind(CHALLENGE, MODELLING )
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = TOTAL, aes(colour = q5(as.numeric(prediction))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(TOTAL,"prediction"),
name="Quintile\nBreaks") +
labs(title="Home Price prediction, Mecklenburg")
Mecklenberg.test %>%
dplyr::select(SalePrice.Predict, price) %>%
ggplot(aes(price, SalePrice.Predict)) +
geom_point() +
stat_smooth(aes(price, price),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(SalePrice.Predict, price),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
coords.test <- st_coordinates(Mecklenberg.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
Mecklenberg.test$lagPrice <- lag.listw(spatialWeights.test, Mecklenberg.test$price)
Mecklenberg.test$lagPriceError<-lag.listw(spatialWeights.test, Mecklenberg.test$SalePrice.Error, NAOK = TRUE)
#Mecklenberg.test %>%
#mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error, NAOK = TRUE)) %>%
#ggplot(aes(lagPriceError, SalePrice.Error))
ggplot(Mecklenberg.test, aes(x=lagPrice, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Price as a function of the spatial lag of price",
caption = "Figure 4.2",
x = "Spatial lag of price (Mean price of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
ggplot(Mecklenberg.test, aes(x=lagPriceError, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Error as a function of the spatial lag of price",
caption="Figure 4.3",
x = "Spatial lag of errors (Mean error of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
moranTest <- moran.mc(Mecklenberg.test$SalePrice.Error,
spatialWeights.test, nsim = 999, na.action=na.omit)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
# Errors by neighborhood
left_join(
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(meanPrice = mean(price, na.rm = T)),
mutate(Mecklenberg.test, predict.fe =
predict(lm(price ~ zip, data = Mecklenberg.test),
Mecklenberg.test)) %>%
st_drop_geometry %>%
group_by(zip) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(mean.MAPE = mean(SalePrice.APE, na.rm = T)) %>%
ungroup() %>%
left_join(Mecklenberg) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = Mecklenberg.test, colour = "black", size = .5) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
Mecklenberg_sum <- Mecklenberg.test %>%
group_by(zip) %>%
summarise(meanMAPE = mean(SalePrice.APE),
meanPrice = mean(SalePrice.Predict))
ggplot(Mecklenberg_sum, aes(x = meanPrice, y = meanMAPE)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
labs(title = "Scatter Plot - SalePrice/MAPE by neighborhood",
x = "Sale Price",
y = "MAPE") +
theme(
legend.position = "none"
)
mean(tracts$MedHHInc, na.rm = T)
tracts <-
tracts%>%
mutate(incomeContext = ifelse(MedHHInc > 77915, "High Income", "Low Income"))
ggplot() + geom_sf(data = na.omit(tracts), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() + theme(legend.position="bottom")
st_join(Mecklenberg.test, tracts) %>%
filter(!is.na(incomeContext)) %>%
group_by(incomeContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(incomeContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood income context")
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
data.frame(Mean_Absolute_Error = mean(Mecklenberg.test$SalePrice.AbsError, na.rm = T),
Mean_Absolute_Percent_Error =mean(Mecklenberg.test$SalePrice.APE, na.rm = T))%>%
kable() %>%
kable_styling()
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = Mecklenberg.test, aes(colour = q5(as.numeric(SalePrice.AbsError))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(sale,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price Absolute Error, Mecklenberg") +
mapTheme()
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(price ~ ., data = st_drop_geometry(salegroup) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths,halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area),
method = "lm", trControl = fitControl, na.action = na.pass)
reg.cv
dplyr::select(reg.cv$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(reg.cv$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric,scales = "free_x") +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
labs(x="Goodness of Fit", y="Count", title="CV Goodness of Fit Metrics",
subtitle = "Across-fold mean reprented as dotted lines")
CHALLENGE <-
salegroup_challenge %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.training, salegroup_challenge),
)%>%
rename(prediction = SalePrice.Predict)
MODELLING <-
salegroup %>%
mutate(Regression = "Neighborhood Effects",
SalePrice.Predict = predict(reg.training, salegroup),
)%>%
rename(prediction = SalePrice.Predict)
TOTAL <- rbind(CHALLENGE, MODELLING )
ggplot() +
geom_sf(data=Mecklenberg,fill = "grey40", color = "grey10",size= 0.7)+
geom_sf(data = TOTAL, aes(colour = q5(as.numeric(prediction))),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(TOTAL,"prediction"),
name="Quintile\nBreaks") +
labs(title="Home Price prediction, Mecklenburg")
Mecklenberg.test %>%
dplyr::select(SalePrice.Predict, price) %>%
ggplot(aes(price, SalePrice.Predict)) +
geom_point() +
stat_smooth(aes(price, price),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(SalePrice.Predict, price),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
coords.test <- st_coordinates(Mecklenberg.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
Mecklenberg.test$lagPrice <- lag.listw(spatialWeights.test, Mecklenberg.test$price)
Mecklenberg.test$lagPriceError<-lag.listw(spatialWeights.test, Mecklenberg.test$SalePrice.Error, NAOK = TRUE)
#Mecklenberg.test %>%
#mutate(lagPriceError = lag.listw(spatialWeights.test, SalePrice.Error, NAOK = TRUE)) %>%
#ggplot(aes(lagPriceError, SalePrice.Error))
ggplot(Mecklenberg.test, aes(x=lagPrice, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Price as a function of the spatial lag of price",
caption = "Figure 4.2",
x = "Spatial lag of price (Mean price of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
ggplot(Mecklenberg.test, aes(x=lagPriceError, y=price)) +
geom_point(colour = "#FA7800") +
geom_smooth(method = "lm", se = FALSE, colour = "#25CB10") +
labs(title = "Error as a function of the spatial lag of price",
caption="Figure 4.3",
x = "Spatial lag of errors (Mean error of 5 nearest neighbors)",
y = "Sale Price") +
plotTheme()
moranTest <- moran.mc(Mecklenberg.test$SalePrice.Error,
spatialWeights.test, nsim = 999, na.action=na.omit)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
# Errors by neighborhood
left_join(
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(meanPrice = mean(price, na.rm = T)),
mutate(Mecklenberg.test, predict.fe =
predict(lm(price ~ zip, data = Mecklenberg.test),
Mecklenberg.test)) %>%
st_drop_geometry %>%
group_by(zip) %>%
summarize(meanPrediction = mean(predict.fe))) %>%
kable() %>% kable_styling()
st_drop_geometry(Mecklenberg.test) %>%
group_by(zip) %>%
summarize(mean.MAPE = mean(SalePrice.APE, na.rm = T)) %>%
ungroup() %>%
left_join(Mecklenberg) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = Mecklenberg.test, colour = "black", size = .5) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
Mecklenberg_sum <- Mecklenberg.test %>%
group_by(zip) %>%
summarise(meanMAPE = mean(SalePrice.APE),
meanPrice = mean(SalePrice.Predict))
ggplot(Mecklenberg_sum, aes(x = meanPrice, y = meanMAPE)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
labs(title = "Scatter Plot - SalePrice/MAPE by neighborhood",
x = "Sale Price",
y = "MAPE") +
theme(
legend.position = "none"
)
mean(tracts$MedHHInc, na.rm = T)
tracts <-
tracts%>%
mutate(incomeContext = ifelse(MedHHInc > 77915, "High Income", "Low Income"))
ggplot() + geom_sf(data = na.omit(tracts), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() + theme(legend.position="bottom")
st_join(Mecklenberg.test, tracts) %>%
filter(!is.na(incomeContext)) %>%
group_by(incomeContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(incomeContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood income context")
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(6)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(8)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(25)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(725)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(2022)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
Mecklenberg.test <-
Mecklenberg.test %>%
mutate(Regression = "Baseline Regression",
SalePrice.Predict = predict(reg.training, Mecklenberg.test),
SalePrice.Error = SalePrice.Predict - price,
SalePrice.AbsError = abs(SalePrice.Predict - price),
SalePrice.APE = (abs(SalePrice.Predict - price)) / SalePrice.Predict)%>%
filter(price < 5000000)
data.frame(Mean_Absolute_Error = mean(Mecklenberg.test$SalePrice.AbsError, na.rm = T),
Mean_Absolute_Percent_Error =mean(Mecklenberg.test$SalePrice.APE, na.rm = T))%>%
kable() %>%
kable_styling()
set.seed(706)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(123)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(89)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
set.seed(5)
inTrain <- createDataPartition(
y = paste(salegroup$storyheigh,salegroup$age.cat,salegroup$heatedfuel, salegroup$actype,salegroup$foundation,salegroup$accounttyp),
p = .60, list = FALSE)
Mecklenberg.training <- salegroup[inTrain,]
Mecklenberg.test <- salegroup[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(Mecklenberg.training) %>%
dplyr::select(price, heatedarea, bedrooms,
age.cat,storyheigh,fullbaths, halfbaths,
numfirepla,foundation,heatedfuel,units,accounttyp, park_nn1,homelessshelter_nn1,landfill,flood100y,school_nn1,bus_nn1,station_nn1,bldggrade,
TotalPop,pctWhite,pctBachelors,pctPoverty,MedHHInc,zip,shape_Area))
stargazer(reg.training, type="text", digits=3)
